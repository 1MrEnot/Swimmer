@page "/competition/{CompetitionId:int}/track/{TrackNumber:int}"
@using Swimmer.Application
@using Swimmer.Application.Commands
@using Swimmer.Infrastructure
@inject SignalRStopwatchClient SignalRStopwatchClient;
@inject IMediator Mediator;

@* ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract *@
@if (CurrentSwim is null)
{
    <p>loading...</p>
}
else
{
    <h3> Swim: @OneBasedCurrentSwimIndex </h3>
    <h4> @(CurrentAthlete?.Athlete.Name ?? "---") </h4>
}

<TimerComponent AllowManualStart="false" OnStop="OnStop" @ref="_timer"></TimerComponent>


@code {
    [Parameter]
    public int CompetitionId { get; set; }

    [Parameter]
    public int TrackNumber { get; set; }

    private int OneBasedCurrentSwimIndex => CurrentSwim.Index + 1;

    private SwimDto CurrentSwim { get; set; } = null!;
    
    private AthleteOnSwimDto? CurrentAthlete { get; set; }
    
    private TimerComponent _timer = null!;

    protected override async Task OnInitializedAsync()
    {
        SignalRStopwatchClient.OnStopwatchStarted(OnStopwatchStarted);
        SignalRStopwatchClient.OnSwimEnded(OnSwimEnded);
        await SignalRStopwatchClient.Start();
        var nextSwim = await Mediator.Send(new GetNextSwimQuery(CompetitionId));
        if (nextSwim is null)
        {
            CurrentSwim = await Mediator.Send(new GetSwimByIndexQuery(CompetitionId, 0));
            return;
        }

        CurrentSwim = nextSwim;
        CurrentAthlete = GetTrackAthlete(CurrentSwim);
    }

    private async void OnStop(DateTime dateTime, TimeSpan timeSpan)
    {
        StateHasChanged();
        if (CurrentAthlete is not null)
            await Mediator.Send(new StopAthleteOnSwimCommand(CurrentSwim.Id, CurrentAthlete.Id, timeSpan));
    }
    
    private void OnStopwatchStarted(int swimId, DateTime startTime)
    {
        _timer.StartFrom(startTime);
    }

    private async void OnSwimEnded(int swimId)
    {
        _timer.Stop();
        CurrentSwim = await Mediator.Send(new GetSwimByIndexQuery(CompetitionId, CurrentSwim.Index));
        CurrentAthlete = GetTrackAthlete(CurrentSwim);
    }

    private AthleteOnSwimDto? GetTrackAthlete(SwimDto? swim) =>
        swim?.Athletes.SingleOrDefault(a => a.Track == TrackNumber);
}