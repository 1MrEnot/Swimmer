@page "/competition/{CompetitionId:int}/Track/{TrackNumber:int}"
@using Swimmer.Application
@using Swimmer.Infrastructure
@inject SignalRStopwatchClient SignalRStopwatchClient;
@inject IMediator Mediator;

<TimerComponent AllowManualStart="false" OnStop="OnStop" @ref="_timer"></TimerComponent>
<p>@Info</p>

@if (!SwimsOnTrack.Any())
{
    <em>Loading...</em>
}
else
{
    @foreach (var swim in SwimsOnTrack)
    {
        <p>@swim.Index : @swim.DistanceName</p>
        <AthleteOnSwimComponent Name="@swim.Athletes.SingleOrDefault()?.Athlete.Name" PreliminaryTime="@swim.Athletes.SingleOrDefault()?.PreliminaryTime"></AthleteOnSwimComponent>
    }
}

@code {
    [Parameter]
    public int CompetitionId { get; set; }

    [Parameter]
    public int TrackNumber { get; set; }

    private string Info { get; set; } = string.Empty;
    
    private TimerComponent _timer = null!;
    private CompetitionDto? CompetitionDto { get; set; }
    private List<SwimDto> SwimsOnTrack { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        CompetitionDto = await Mediator.Send(new GetCompetitionQuery(CompetitionId));
        SwimsOnTrack = await Mediator.Send(new GetSwimsOnTrackQuery(CompetitionId, TrackNumber));
        
        SignalRStopwatchClient.OnStopwatchStarted(OnStopwatchStarted);
        await SignalRStopwatchClient.Start();
    }

    private void OnStop(DateTime dateTime, TimeSpan timeSpan)
    {
        Info = $"Swim ended at {dateTime} in {timeSpan}";
        StateHasChanged();
    }
    
    private void OnStopwatchStarted(int competitionId, int swimId, DateTime startTime)
    {
        if (CompetitionId != competitionId) 
            return;
        
        _timer.StartFrom(startTime);
    }
}